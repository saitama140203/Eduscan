from fastapi import APIRouter, Depends, status, UploadFile, File, Form, Query, HTTPException
from fastapi.responses import RedirectResponse, FileResponse
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
import os
import json
import time
import shutil
import logging
from sqlalchemy.orm.attributes import flag_modified
import uuid
from datetime import datetime, timezone

from app.db.session import get_async_db
from app.services.answer_sheet_template_service import AnswerSheetTemplateService
from app.schemas.answer_sheet_template import (
    AnswerSheetTemplateCreate,
    AnswerSheetTemplateUpdate,
    AnswerSheetTemplateOut,
    FileUploadResponse,
    TemplateFileInfo,
    TemplateSearchRequest,
    TemplateDuplicateRequest,
    TemplateStatistics,
    TemplateValidationResponse,
    TemplateVisibilityRequest,
    TemplateDefaultRequest,
    TemplateBulkDeleteRequest,
    TemplateBulkResponse,
)
from app.models.user import User
from app.models.file import File as FileModel
from app.utils.auth import check_admin_permission, check_teacher_permission
from app.services.omr_service import get_omr_service
from app.core.config import settings

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/answer-templates", tags=["answer_templates"])


@router.get("/", response_model=List[AnswerSheetTemplateOut])
async def read_templates(
    ma_to_chuc: Optional[int] = None, 
    current_user: User = Depends(check_teacher_permission), 
    db: AsyncSession = Depends(get_async_db)
):
    """L·∫•y danh s√°ch template (Teacher/Manager/Admin c√≥ th·ªÉ xem)"""
    # N·∫øu l√† Admin, c√≥ th·ªÉ xem t·∫•t c·∫£
    if current_user.vaiTro == "ADMIN":
        return await AnswerSheetTemplateService.get_list(db, ma_to_chuc)
    
    # N·∫øu l√† Manager ho·∫∑c Teacher, xem templates c·ªßa t·ªï ch·ª©c m√¨nh + system templates (maToChuc=None) + public templates
    templates = await AnswerSheetTemplateService.get_list(db, current_user.maToChuc)
    try:
        # L·∫•y system templates (Admin t·∫°o cho t·∫•t c·∫£ - maToChuc=None)
        system_templates = await AnswerSheetTemplateService.get_list(db, None)
        
        # L·∫•y public templates t·ª´ c√°c t·ªï ch·ª©c kh√°c
        public_templates = await AnswerSheetTemplateService.get_public_templates(db)
        
        # Merge v√† lo·∫°i b·ªè duplicates based on maMauPhieu
        template_ids = {t.maMauPhieu for t in templates}
        unique_system = [t for t in system_templates if t.maMauPhieu not in template_ids]
        template_ids.update(t.maMauPhieu for t in unique_system)
        unique_public = [t for t in public_templates if t.maMauPhieu not in template_ids]
        
        all_templates = templates + unique_system + unique_public
        return all_templates
    except:
        # Fallback n·∫øu c√≥ l·ªói
        return templates

@router.post("/", response_model=AnswerSheetTemplateOut, status_code=status.HTTP_201_CREATED)
async def create_template(
    template: AnswerSheetTemplateCreate, 
    current_user: User = Depends(check_admin_permission), 
    db: AsyncSession = Depends(get_async_db)
):
    """T·∫°o template m·ªõi"""
    # Validate d·ªØ li·ªáu tr∆∞·ªõc khi t·∫°o
    validation = await AnswerSheetTemplateService.validate_template_structure(template.dict())
    if not validation["valid"]:
        raise HTTPException(
            status_code=400, 
            detail=f"D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: {', '.join(validation['errors'])}"
        )
    
    # Set creator info
    template.maNguoiTao = current_user.maNguoiDung
    
    # Logic t·∫°o template theo role
    if str(current_user.vaiTro).upper() == "ADMIN":
        # Admin t·∫°o template h·ªá th·ªëng (maToChuc = None) - t·∫•t c·∫£ ƒë·ªÅu xem ƒë∆∞·ª£c
        template.maToChuc = None
    else:
        # Non-admin user t·∫°o cho t·ªï ch·ª©c c·ªßa m√¨nh
        template.maToChuc = current_user.maToChuc
    
    return await AnswerSheetTemplateService.create_template(db, template)

@router.post("/create-with-files", response_model=dict, status_code=status.HTTP_201_CREATED)
async def create_template_with_files(
    tenMauPhieu: str = Form(...),
    soCauHoi: int = Form(...),
    soLuaChonMoiCau: int = Form(4),
    khoGiay: str = Form("A4"),
    coTuLuan: bool = Form(False),
    coThongTinHocSinh: bool = Form(True),
    coLogo: bool = Form(False),
    laCongKhai: bool = Form(False),
    laMacDinh: bool = Form(False),
    template_image: UploadFile = File(..., description="File ·∫£nh template ƒë·ªÉ cƒÉn ch·ªânh v√† ch·∫•m b√†i (.png/.jpg)"),
    template_config: UploadFile = File(..., description="File c·∫•u h√¨nh OMR (template.json)"), 
    template_pdf: UploadFile = File(..., description="File PDF m·∫´u ƒë·ªÉ gi√°o vi√™n in (.pdf)"),
    current_user: User = Depends(check_admin_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """
    T·∫°o template m·ªõi v·ªõi ƒë·∫ßy ƒë·ªß 3 file:
    1. Template Image: ·∫¢nh ƒë·ªÉ cƒÉn ch·ªânh v√† ch·∫•m b√†i t·ª± ƒë·ªông
    2. Template Config: File JSON c·∫•u h√¨nh OMR 
    3. Template PDF: File PDF ƒë·ªÉ gi√°o vi√™n t·∫£i v·ªÅ v√† in
    """
    try:
        # Validate files
        # 1. Validate template image
        if template_image.content_type not in ["image/png", "image/jpeg", "image/jpg"]:
            raise HTTPException(status_code=400, detail="File ·∫£nh template ph·∫£i l√† PNG ho·∫∑c JPG")
        if template_image.size > 10 * 1024 * 1024:  # 10MB
            raise HTTPException(status_code=400, detail="File ·∫£nh template kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10MB")
        
        # 2. Validate template config
        if not template_config.filename.endswith('.json'):
            raise HTTPException(status_code=400, detail="File c·∫•u h√¨nh OMR ph·∫£i l√† JSON")
        if template_config.size > 1 * 1024 * 1024:  # 1MB
            raise HTTPException(status_code=400, detail="File JSON kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 1MB")
        
        # 3. Validate template PDF
        if template_pdf.content_type != "application/pdf":
            raise HTTPException(status_code=400, detail="File m·∫´u in ph·∫£i l√† PDF")
        if template_pdf.size > 50 * 1024 * 1024:  # 50MB
            raise HTTPException(status_code=400, detail="File PDF kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50MB")

        # Parse v√† validate JSON config
        template_config.file.seek(0)
        config_content = await template_config.read()
        try:
            omr_config = json.loads(config_content.decode('utf-8'))
        except json.JSONDecodeError as e:
            raise HTTPException(status_code=400, detail=f"File JSON kh√¥ng h·ª£p l·ªá: {str(e)}")
        
        # Validate required OMR fields
        required_fields = ["pageDimensions", "bubbleDimensions", "fieldBlocks"]
        missing_fields = [field for field in required_fields if field not in omr_config]
        if missing_fields:
            raise HTTPException(
                status_code=400, 
                detail=f"File JSON thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: {', '.join(missing_fields)}"
            )

        logger.info(f"Validated OMR config: {len(omr_config['fieldBlocks'])} fieldBlocks")

        # X√°c ƒë·ªãnh maToChuc tr∆∞·ªõc
        if str(current_user.vaiTro).upper() == "ADMIN":
            # Admin t·∫°o template h·ªá th·ªëng (maToChuc = None) - t·∫•t c·∫£ ƒë·ªÅu xem ƒë∆∞·ª£c
            ma_to_chuc = None
        else:
            # Non-admin user t·∫°o cho t·ªï ch·ª©c c·ªßa m√¨nh
            ma_to_chuc = current_user.maToChuc

        # T·∫°o template c∆° b·∫£n
        template_data = AnswerSheetTemplateCreate(
            tenMauPhieu=tenMauPhieu,
            soCauHoi=soCauHoi,
            soLuaChonMoiCau=soLuaChonMoiCau,
            khoGiay=khoGiay,
            coTuLuan=coTuLuan,
            coThongTinHocSinh=coThongTinHocSinh,
            coLogo=coLogo,
            laCongKhai=laCongKhai,
            laMacDinh=laMacDinh,
            maNguoiTao=current_user.maNguoiDung,
            maToChuc=ma_to_chuc
        )
        
        new_template = await AnswerSheetTemplateService.create_template(db, template_data)
        
        template_id = new_template.maMauPhieu
        print(f"‚úÖ Created basic template: ID {template_id}")

        try:
            # Reset file pointers
            template_image.file.seek(0)
            template_pdf.file.seek(0)

            # Upload template image (cho ch·∫•m b√†i)
            print("üì§ Uploading template image...")
            image_response = await AnswerSheetTemplateService.upload_template_file(
                db, template_id, template_image, current_user.maNguoiDung, ma_to_chuc
            )
            print(f"‚úÖ Template image uploaded: {image_response}")

            # Upload template PDF (cho in ·∫•n)
            print("üì§ Uploading template PDF...")
            pdf_response = await AnswerSheetTemplateService.upload_template_file(
                db, template_id, template_pdf, current_user.maNguoiDung, ma_to_chuc
            )
            print(f"‚úÖ Template PDF uploaded: {pdf_response}")

            # L∆∞u OMR config v√†o th∆∞ m·ª•c templates/
            # L∆∞u OMR config v√†o th∆∞ m·ª•c OMRChecker/templates/
            print("üíæ Saving OMR configuration...")
            omr_templates_dir = f"${settings.OMR_DATA_DIR}/templates/template_{template_id}"
            os.makedirs(omr_templates_dir, exist_ok=True)
            
            # L∆∞u file template.json
            config_path = os.path.join(omr_templates_dir, "template.json")
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(omr_config, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ OMR config saved: {config_path}")

            # Copy ·∫£nh template v√†o th∆∞ m·ª•c OMR v·ªõi t√™n chu·∫©n
            print("üñºÔ∏è Copying template image to OMR directory...")
            updated_template = await AnswerSheetTemplateService.get_template(db, template_id)
            image_file_info = AnswerSheetTemplateService._get_file_info_from_template(updated_template)
            
            if image_file_info and image_file_info.get('maTapTin'):
                file_record = await db.get(FileModel, image_file_info['maTapTin'])
                if file_record and os.path.exists(file_record.duongDan):
                    # Copy v·ªõi t√™n chu·∫©n
                    image_filename = f"template_{template_id}.png"
                    omr_image_path = os.path.join(omr_templates_dir, image_filename)
                    shutil.copy2(file_record.duongDan, omr_image_path)
                    print(f"‚úÖ Template image copied to OMR: {omr_image_path}")
                    
                    # Update reference trong preProcessors n·∫øu c√≥
                    if "preProcessors" in omr_config:
                        for processor in omr_config["preProcessors"]:
                            if processor.get("name") == "AdvancedFeatureAlignment":
                                processor["options"]["reference"] = image_filename
                        
                        # Re-save config v·ªõi reference updated
                        with open(config_path, 'w', encoding='utf-8') as f:
                            json.dump(omr_config, f, ensure_ascii=False, indent=2)
                        print("‚úÖ Updated OMR config with image reference")

            # C·∫≠p nh·∫≠t OMR config information v·ªõi function chuy√™n d·ª•ng
            omr_image_path_local = omr_image_path if 'omr_image_path' in locals() else None
            AnswerSheetTemplateService._update_omr_config_in_template(
                updated_template, omr_config, config_path, omr_image_path_local
            )
            
            # B√°o cho SQLAlchemy r·∫±ng tr∆∞·ªùng JSON ƒë√£ b·ªã thay ƒë·ªïi
            flag_modified(updated_template, "cauTrucJson")
            
            await db.commit()
            await db.refresh(updated_template)
            
            print(f"‚úÖ Template created successfully with all 3 files:")
            print(f"   üì∏ Template Image: {image_file_info.get('tenFileGoc', 'Unknown')}")
            print(f"   üìÑ Template PDF: {pdf_response.get('tenFileGoc', 'Unknown')}")
            print(f"   ‚öôÔ∏è OMR Config: template.json")
            print(f"   üìÅ OMR Directory: {omr_templates_dir}")

            return {
                "success": True,
                "message": "Template ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ƒë·∫ßy ƒë·ªß 3 file!",
                "template": {
                    "id": template_id,
                    "name": tenMauPhieu,
                    "files": {
                        "templateImage": {
                            "name": image_file_info.get('tenFileGoc', 'Unknown'),
                            "purpose": "CƒÉn ch·ªânh v√† ch·∫•m b√†i t·ª± ƒë·ªông",
                            "size": template_image.size
                        },
                        "templatePdf": {
                            "name": template_pdf.filename,
                            "purpose": "File m·∫´u ƒë·ªÉ gi√°o vi√™n in",
                            "size": template_pdf.size
                        },
                        "omrConfig": {
                            "name": "template.json",
                            "purpose": "C·∫•u h√¨nh v√πng nh·∫≠n d·∫°ng OMR",
                            "fieldBlocks": len(omr_config['fieldBlocks'])
                        }
                    }
                },
                "omrDirectory": omr_templates_dir
            }

        except Exception as e:
            # Rollback: x√≥a template n·∫øu upload files th·∫•t b·∫°i
            logger.error(f"Error during file upload, rolling back template {template_id}")
            try:
                await AnswerSheetTemplateService.delete_template(db, template_id, current_user.maNguoiDung)
            except Exception as delete_exc:
                logger.error(f"Failed to rollback template {template_id}: {delete_exc}")
            
            raise HTTPException(status_code=500, detail=f"L·ªói upload files: {str(e)}")

    except HTTPException:
        raise  # Re-raise HTTP exceptions as-is
    except Exception as e:
        logger.error(f"Unexpected error in create_template_with_files: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói t·∫°o template: {str(e)}")

@router.post("/create-with-pdf", response_model=dict, status_code=status.HTTP_201_CREATED)
async def create_template_with_pdf(
    tenMauPhieu: str = Form(...),
    soCauHoi: int = Form(...),
    soLuaChonMoiCau: int = Form(4),
    khoGiay: str = Form("A4"),
    coTuLuan: bool = Form(False),
    coThongTinHocSinh: bool = Form(True),
    coLogo: bool = Form(False),
    laCongKhai: bool = Form(False),
    laMacDinh: bool = Form(False),
    template_pdf: UploadFile = File(..., description="File PDF template ƒë·ªÉ in"),
    current_user: User = Depends(check_admin_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """
    T·∫°o template m·ªõi ch·ªâ v·ªõi file PDF
    ·∫¢nh template v√† JSON config s·∫Ω ƒë∆∞·ª£c upload sau ·ªü b∆∞·ªõc c·∫•u h√¨nh OMR
    """
    try:
        # Validate PDF file
        if template_pdf.content_type != "application/pdf":
            raise HTTPException(status_code=400, detail="File template ph·∫£i l√† PDF")
        if template_pdf.size > 50 * 1024 * 1024:  # 50MB
            raise HTTPException(status_code=400, detail="File PDF kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50MB")

        print(f"‚úÖ Validated PDF: {template_pdf.filename} ({template_pdf.size} bytes)")

        # X√°c ƒë·ªãnh maToChuc tr∆∞·ªõc
        if str(current_user.vaiTro).upper() == "ADMIN":
            # Admin t·∫°o template h·ªá th·ªëng (maToChuc = None) - t·∫•t c·∫£ ƒë·ªÅu xem ƒë∆∞·ª£c
            ma_to_chuc = None
        else:
            # Non-admin user t·∫°o cho t·ªï ch·ª©c c·ªßa m√¨nh
            ma_to_chuc = current_user.maToChuc

        # T·∫°o template c∆° b·∫£n
        template_data = AnswerSheetTemplateCreate(
            tenMauPhieu=tenMauPhieu,
            soCauHoi=soCauHoi,
            soLuaChonMoiCau=soLuaChonMoiCau,
            khoGiay=khoGiay,
            coTuLuan=coTuLuan,
            coThongTinHocSinh=coThongTinHocSinh,
            coLogo=coLogo,
            laCongKhai=laCongKhai,
            laMacDinh=laMacDinh,
            maNguoiTao=current_user.maNguoiDung,
            maToChuc=ma_to_chuc
        )
        
        new_template = await AnswerSheetTemplateService.create_template(db, template_data)
        
        template_id = new_template.maMauPhieu
        print(f"‚úÖ Created basic template: ID {template_id}")

        # Upload PDF file
        print("üì§ Uploading template PDF...")
        pdf_response = await AnswerSheetTemplateService.upload_template_file(
            db, template_id, template_pdf, current_user.maNguoiDung, ma_to_chuc
        )
        print(f"‚úÖ Template PDF uploaded: {pdf_response}")

        # C·∫≠p nh·∫≠t cauTrucJson v·ªõi th√¥ng tin PDF
        updated_template = await AnswerSheetTemplateService.get_template(db, template_id)
        current_structure = updated_template.cauTrucJson or {}
        current_structure["fileTypes"] = {
            "templatePdf": {
                "purpose": "File m·∫´u ƒë·ªÉ gi√°o vi√™n in",
                "fileInfo": pdf_response,
                "uploaded": True
            },
            "templateImage": {
                "purpose": "·∫¢nh ƒë·ªÉ cƒÉn ch·ªânh v√† ch·∫•m b√†i",
                "uploaded": False
            },
            "omrConfig": {
                "purpose": "C·∫•u h√¨nh v√πng nh·∫≠n d·∫°ng OMR", 
                "uploaded": False
            }
        }
        
        updated_template.cauTrucJson = current_structure
        await db.commit()
        await db.refresh(updated_template)
        
        print(f"‚úÖ Template created successfully with PDF:")
        print(f"   üìÑ Template PDF: {template_pdf.filename}")
        print(f"   ‚ö†Ô∏è  OMR Config: Ch∆∞a c√≥ (c·∫ßn upload sau)")

        return {
            "success": True,
            "message": "Template ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! H√£y v√†o Edit ƒë·ªÉ c·∫•u h√¨nh OMR.",
            "template": {
                "id": template_id,
                "name": tenMauPhieu,
                "pdfFile": {
                    "name": template_pdf.filename,
                    "size": template_pdf.size,
                    "uploaded": True
                },
                "omrConfigured": False,
                "nextStep": "V√†o Edit ‚Üí OMR Config ƒë·ªÉ upload ·∫£nh template v√† JSON config"
            },
            "redirectUrl": f"/dashboard/admin/answer-templates/{template_id}/edit"
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Unexpected error in create_template_with_pdf: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói t·∫°o template: {str(e)}")

@router.get("/{template_id}", response_model=AnswerSheetTemplateOut)
async def get_template(
    template_id: int, 
    current_user: User = Depends(check_teacher_permission), 
    db: AsyncSession = Depends(get_async_db)
):
    """L·∫•y th√¥ng tin template theo ID"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        template.maToChuc is not None and  # System templates (maToChuc=None) accessible to all
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    return template

@router.put("/{template_id}", response_model=AnswerSheetTemplateOut)
async def update_template(
    template_id: int, 
    template_update: AnswerSheetTemplateUpdate, 
    current_user: User = Depends(check_admin_permission), 
    db: AsyncSession = Depends(get_async_db)
):
    """C·∫≠p nh·∫≠t template"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn s·ª≠a
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maNguoiTao != current_user.maNguoiDung):
        raise HTTPException(status_code=403, detail="Ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c Admin m·ªõi c√≥ th·ªÉ s·ª≠a template")
    
    # Validate d·ªØ li·ªáu n·∫øu c√≥ thay ƒë·ªïi c·∫•u tr√∫c
    if any([template_update.soCauHoi, template_update.soLuaChonMoiCau, template_update.tenMauPhieu]):
        update_data = template_update.dict(exclude_unset=True)
        # Merge v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i ƒë·ªÉ validate
        current_data = {
            "tenMauPhieu": template.tenMauPhieu,
            "soCauHoi": template.soCauHoi,
            "soLuaChonMoiCau": template.soLuaChonMoiCau
        }
        current_data.update(update_data)
        
        validation = await AnswerSheetTemplateService.validate_template_structure(current_data)
        if not validation["valid"]:
            raise HTTPException(
                status_code=400, 
                detail=f"D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: {', '.join(validation['errors'])}"
            )
    
    return await AnswerSheetTemplateService.update_template(db, template_id, template_update)

@router.delete("/{template_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_template(
    template_id: int, 
    current_user: User = Depends(check_admin_permission), 
    db: AsyncSession = Depends(get_async_db)
):
    """X√≥a template"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn x√≥a
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maNguoiTao != current_user.maNguoiDung):
        raise HTTPException(status_code=403, detail="Ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c Admin m·ªõi c√≥ th·ªÉ x√≥a template")
    
    await AnswerSheetTemplateService.delete_template(db, template_id, current_user.maNguoiDung)
    return {"message": "deleted"}

# ========== SEARCH & FILTER ==========

@router.post("/search", response_model=List[AnswerSheetTemplateOut])
async def search_templates(
    search_request: TemplateSearchRequest,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """T√¨m ki·∫øm template v·ªõi b·ªô l·ªçc"""
    # Gi·ªõi h·∫°n t√¨m ki·∫øm theo quy·ªÅn
    if str(current_user.vaiTro).upper() != "ADMIN":
        search_request.ma_to_chuc = current_user.maToChuc
    
    return await AnswerSheetTemplateService.search_templates(
        db,
        keyword=search_request.keyword,
        ma_to_chuc=search_request.ma_to_chuc,
        la_cong_khai=search_request.la_cong_khai,
        la_mac_dinh=search_request.la_mac_dinh
    )

@router.get("/public", response_model=List[AnswerSheetTemplateOut])
async def get_public_templates(
    current_user: User = Depends(check_teacher_permission), 
    db: AsyncSession = Depends(get_async_db)
):
    """L·∫•y danh s√°ch template c√¥ng khai"""
    return await AnswerSheetTemplateService.get_public_templates(db)

@router.get("/default", response_model=List[AnswerSheetTemplateOut])
async def get_default_templates(
    current_user: User = Depends(check_teacher_permission), 
    db: AsyncSession = Depends(get_async_db)
):
    """L·∫•y danh s√°ch template m·∫∑c ƒë·ªãnh"""
    return await AnswerSheetTemplateService.get_default_templates(db)

@router.get("/organization/{ma_to_chuc}", response_model=List[AnswerSheetTemplateOut])
async def get_templates_by_organization(
    ma_to_chuc: int,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """L·∫•y template c·ªßa t·ªï ch·ª©c"""
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if str(current_user.vaiTro).upper() != "ADMIN" and current_user.maToChuc != ma_to_chuc:
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template c·ªßa t·ªï ch·ª©c kh√°c")
    
    return await AnswerSheetTemplateService.get_templates_by_organization(db, ma_to_chuc)

@router.get("/my-templates", response_model=List[AnswerSheetTemplateOut])
async def get_my_templates(
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """L·∫•y template c·ªßa t√¥i"""
    return await AnswerSheetTemplateService.get_templates_by_creator(db, current_user.maNguoiDung)

# ========== FILE OPERATIONS ==========

@router.post("/{template_id}/upload", response_model=FileUploadResponse)
async def upload_template_file(
    template_id: int,
    file: UploadFile = File(...),
    current_user: User = Depends(check_admin_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """Upload file m·∫´u phi·∫øu tr·∫£ l·ªùi"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn upload - case insensitive for role
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maNguoiTao != current_user.maNguoiDung):
        raise HTTPException(status_code=403, detail="Ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c Admin m·ªõi c√≥ th·ªÉ upload file")
    
    # Ki·ªÉm tra lo·∫°i file
    allowed_types = ["application/pdf", "image/jpeg", "image/png", "image/jpg"]
    if file.content_type not in allowed_types:
        raise HTTPException(status_code=400, detail="Ch·ªâ ch·∫•p nh·∫≠n file PDF ho·∫∑c h√¨nh ·∫£nh")
    
    # Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 10MB)
    if file.size and file.size > 10 * 1024 * 1024:
        raise HTTPException(status_code=400, detail="File qu√° l·ªõn (t·ªëi ƒëa 10MB)")
    
    return await AnswerSheetTemplateService.upload_template_file(
        db, template_id, file, current_user.maNguoiDung, template.maToChuc
    )

@router.post("/{template_id}/upload-complete", response_model=dict)
async def upload_template_complete(
    template_id: int,
    template_image: UploadFile = File(..., description="File ·∫£nh template (.png/.jpg)"),
    template_config: UploadFile = File(..., description="File c·∫•u h√¨nh OMR (template.json)"),
    current_user: User = Depends(check_admin_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """
    Ho√†n thi·ªán template v·ªõi ·∫£nh template v√† JSON config
    Endpoint n√†y s·ª≠ d·ª•ng sau khi ƒë√£ upload PDF ·ªü b∆∞·ªõc t·∫°o template
    """
    print(f"üéØ UPLOAD-COMPLETE: Received request for template {template_id}")
    print(f"üë§ User: {current_user.hoTen} (ID: {current_user.maNguoiDung})")
    print(f"üñºÔ∏è Image: {template_image.filename} ({template_image.size} bytes)")
    print(f"üìÑ Config: {template_config.filename} ({template_config.size} bytes)")
    
    try:
        template = await AnswerSheetTemplateService.get_template(db, template_id)
        
        # Ki·ªÉm tra quy·ªÅn s·ª≠a
        if (str(current_user.vaiTro).upper() != "ADMIN" and 
            template.maNguoiTao != current_user.maNguoiDung):
            raise HTTPException(status_code=403, detail="Ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c Admin m·ªõi c√≥ th·ªÉ c·∫•u h√¨nh template")
        
        # Validate template image
        if template_image.content_type not in ["image/png", "image/jpeg", "image/jpg"]:
            raise HTTPException(status_code=400, detail="File ·∫£nh template ph·∫£i l√† PNG ho·∫∑c JPG")
        if template_image.size > 20 * 1024 * 1024:  # 20MB
            raise HTTPException(status_code=400, detail="File ·∫£nh template kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 20MB")
        
        # Validate template config JSON
        if not template_config.filename.endswith('.json'):
            raise HTTPException(status_code=400, detail="File c·∫•u h√¨nh OMR ph·∫£i l√† JSON (.json)")
        if template_config.size > 2 * 1024 * 1024:  # 2MB
            raise HTTPException(status_code=400, detail="File JSON kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 2MB")
        
        # Parse v√† validate JSON config
        template_config.file.seek(0)
        config_content = await template_config.read()
        try:
            omr_config = json.loads(config_content.decode('utf-8'))
        except json.JSONDecodeError as e:
            raise HTTPException(status_code=400, detail=f"File JSON kh√¥ng h·ª£p l·ªá: {str(e)}")
        
        # Validate required OMR fields
        required_fields = ["pageDimensions", "bubbleDimensions", "fieldBlocks"]
        missing_fields = [field for field in required_fields if field not in omr_config]
        if missing_fields:
            raise HTTPException(
                status_code=400, 
                detail=f"File JSON thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: {', '.join(missing_fields)}"
            )
        
        # Validate fieldBlocks structure
        if not isinstance(omr_config.get("fieldBlocks"), dict):
            raise HTTPException(status_code=400, detail="fieldBlocks ph·∫£i l√† object")
        
        print(f"‚úÖ Validated files for template {template_id}")
        print(f"   üì∏ Image: {template_image.filename} ({template_image.size} bytes)")
        print(f"   ‚öôÔ∏è Config: {template_config.filename} ({template_config.size} bytes)")
        
        # Reset file pointers
        template_image.file.seek(0)
        
        # T·∫°o OMR directory v√† l∆∞u c·∫£ 2 files trong ƒë√≥
        print("üíæ Setting up OMR configuration...")
        omr_templates_dir = f"${settings.OMR_DATA_DIR}/templates/template_{template_id}"
        os.makedirs(omr_templates_dir, exist_ok=True)
        
        # L∆∞u ·∫£nh template tr·ª±c ti·∫øp v√†o OMR directory
        print("üñºÔ∏è Saving template image to OMR directory...")
        image_extension = template_image.filename.split('.')[-1].lower()
        template_image_filename = f"template_{template_id}.{image_extension}"
        target_image_path = os.path.join(omr_templates_dir, template_image_filename)
        
        # Reset file pointer and save image
        template_image.file.seek(0)
        image_content = await template_image.read()
        with open(target_image_path, 'wb') as f:
            f.write(image_content)
        print(f"‚úÖ Template image saved: {target_image_path}")
        
        # L∆∞u file template.json trong c√πng th∆∞ m·ª•c
        config_path = os.path.join(omr_templates_dir, "template.json")
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(omr_config, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ OMR config saved: {config_path}")
        
        # T·∫°o file info cho ·∫£nh template (kh√¥ng l∆∞u v√†o uploads n·ªØa)
        image_file_size = len(image_content)
        image_response = type('ImageResponse', (), {
            'maTapTin': None,  # Kh√¥ng l∆∞u v√†o database
            'tenFileGoc': template_image.filename,
            'kichThuocFile': image_file_size,
            'loaiFile': template_image.content_type
        })()
        
        # C·∫≠p nh·∫≠t cauTrucJson v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
        print("üìù Updating template structure...")
        updated_template = await AnswerSheetTemplateService.get_template(db, template_id)
        
        # C·∫≠p nh·∫≠t th√¥ng tin file image v√† config ri√™ng bi·ªát
        print("üìù Updating template with image and config info...")
        
        # ƒê·∫£m b·∫£o c·∫•u tr√∫c fileTypes t·ªìn t·∫°i
        if not updated_template.cauTrucJson:
            updated_template.cauTrucJson = {}
        if "fileTypes" not in updated_template.cauTrucJson:
            updated_template.cauTrucJson["fileTypes"] = {}
        
        # C·∫≠p nh·∫≠t th√¥ng tin image template
        updated_template.cauTrucJson["fileTypes"]["templateImage"] = {
            "maTapTin": image_response.maTapTin,
            "tenFileGoc": image_response.tenFileGoc,
            "kichThuocFile": image_response.kichThuocFile,
            "loaiFile": image_response.loaiFile,
            "purpose": "·∫¢nh chu·∫©n ƒë·ªÉ cƒÉn ch·ªânh v√† nh·∫≠n d·∫°ng khi ch·∫•m b√†i",
            "uploaded": True,
            "uploadDate": int(time.time()),
            "storagePath": target_image_path,
            "omrDirectory": omr_templates_dir
        }
        
        # C·∫≠p nh·∫≠t th√¥ng tin OMR config b·∫±ng helper function
        AnswerSheetTemplateService._update_omr_config_in_template(
            updated_template, omr_config, config_path, target_image_path
        )
        
        # B√°o cho SQLAlchemy r·∫±ng tr∆∞·ªùng JSON ƒë√£ b·ªã thay ƒë·ªïi
        flag_modified(updated_template, "cauTrucJson")
        
        await db.commit()
        await db.refresh(updated_template)
        
        upload_status = updated_template.cauTrucJson.get("uploadStatus", {})
        
        print(f"‚úÖ Template {template_id} upload complete. Status: {upload_status.get('completeness')}%")
        
        return {
            "success": True,
            "message": "Template ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh OMR th√†nh c√¥ng!" if upload_status.get('isComplete') else "ƒê√£ upload th√™m file cho template",
            "template_id": template_id,
            "upload_status": upload_status
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Unexpected error in upload_template_complete: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói ho√†n thi·ªán template: {str(e)}")

@router.get("/{template_id}/file-status", response_model=dict)
async def get_template_file_status(
    template_id: int,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """Ki·ªÉm tra tr·∫°ng th√°i ƒë·∫ßy ƒë·ªß c·ªßa 3 file template b·∫Øt bu·ªôc"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        template.maToChuc is not None and  # System templates (maToChuc=None) accessible to all
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    file_status = {
        "template_id": template_id,
        "template_name": template.tenMauPhieu,
        "files": {
            "pdf": {
                "name": "File PDF Template",
                "purpose": "ƒê·ªÉ gi√°o vi√™n t·∫£i v·ªÅ v√† in ra cho h·ªçc sinh l√†m",
                "required": True,
                "uploaded": False,
                "file_info": None
            },
            "image": {
                "name": "·∫¢nh Template",
                "purpose": "·∫¢nh chu·∫©n ƒë·ªÉ cƒÉn ch·ªânh v√† nh·∫≠n d·∫°ng khi ch·∫•m b√†i",
                "required": True,
                "uploaded": False,
                "file_info": None
            },
            "json": {
                "name": "File JSON Config",
                "purpose": "C·∫•u tr√∫c template ƒë·ªãnh nghƒ©a v√πng nh·∫≠n d·∫°ng OMR",
                "required": True,
                "uploaded": False,
                "file_info": None
            }
        }
    }
    
    # Ki·ªÉm tra cauTrucJson
    print(f"üîç DEBUG Template {template_id} file status check:")
    print(f"üìÑ cauTrucJson exists: {bool(template.cauTrucJson)}")
    if template.cauTrucJson:
        print(f"üìÅ fileTypes exists: {'fileTypes' in template.cauTrucJson}")
        if "fileTypes" in template.cauTrucJson:
            file_types = template.cauTrucJson["fileTypes"]
            print(f"üìä fileTypes keys: {list(file_types.keys())}")
            for file_type, info in file_types.items():
                print(f"   - {file_type}: uploaded={info.get('uploaded', False)}")
    
    if template.cauTrucJson and "fileTypes" in template.cauTrucJson:
        file_types = template.cauTrucJson["fileTypes"]
        
        # Ki·ªÉm tra PDF file
        if "templatePdf" in file_types and file_types["templatePdf"].get("uploaded", False):
            file_status["files"]["pdf"]["uploaded"] = True
            file_status["files"]["pdf"]["file_info"] = {
                "tenFileGoc": file_types["templatePdf"].get("tenFileGoc"),
                "kichThuocFile": file_types["templatePdf"].get("kichThuocFile"),
                "loaiFile": file_types["templatePdf"].get("loaiFile"),
                "uploadDate": file_types["templatePdf"].get("uploadDate"),
                "storagePath": file_types["templatePdf"].get("storagePath")
            }
        
        # Ki·ªÉm tra Image file
        if "templateImage" in file_types and file_types["templateImage"].get("uploaded", False):
            file_status["files"]["image"]["uploaded"] = True
            file_status["files"]["image"]["file_info"] = {
                "tenFileGoc": file_types["templateImage"].get("tenFileGoc"),
                "kichThuocFile": file_types["templateImage"].get("kichThuocFile"),
                "loaiFile": file_types["templateImage"].get("loaiFile"),
                "uploadDate": file_types["templateImage"].get("uploadDate"),
                "storagePath": file_types["templateImage"].get("storagePath")
            }
        
        # Ki·ªÉm tra JSON config
        if "omrConfig" in file_types and file_types["omrConfig"].get("uploaded", False):
            file_status["files"]["json"]["uploaded"] = True
            file_status["files"]["json"]["file_info"] = {
                "configData": file_types["omrConfig"].get("configData"),
                "uploadDate": file_types["omrConfig"].get("uploadDate"),
                "storagePath": file_types["omrConfig"].get("storagePath")
            }
    
    # T√≠nh to√°n completeness
    uploaded_files = sum(1 for f in file_status["files"].values() if f["uploaded"])
    total_required = sum(1 for f in file_status["files"].values() if f["required"])
    
    file_status["completeness"] = {
        "uploaded_count": uploaded_files,
        "required_count": total_required,
        "percentage": round((uploaded_files / total_required) * 100, 1),
        "is_complete": uploaded_files == total_required
    }
    
    # ƒê∆∞a ra h∆∞·ªõng d·∫´n b∆∞·ªõc ti·∫øp theo
    missing_files = [f["name"] for f in file_status["files"].values() if f["required"] and not f["uploaded"]]
    
    if missing_files:
        file_status["next_steps"] = {
            "message": "Template ch∆∞a ho√†n thi·ªán. C·∫ßn upload th√™m:",
            "missing_files": missing_files,
            "suggestion": "V√†o tab 'OMR Config' ƒë·ªÉ upload file c√≤n thi·∫øu"
        }
    else:
        file_status["next_steps"] = {
            "message": "Template ƒë√£ ho√†n thi·ªán ƒë·∫ßy ƒë·ªß 3 file!",
            "missing_files": [],
            "suggestion": "C√≥ th·ªÉ s·ª≠ d·ª•ng Preview v√† Process OMR"
        }
    
    return file_status

@router.get("/{template_id}/file-info", response_model=TemplateFileInfo)
async def get_template_file_info(
    template_id: int,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """L·∫•y th√¥ng tin file c·ªßa template"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        template.maToChuc is not None and  # System templates (maToChuc=None) accessible to all
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    return await AnswerSheetTemplateService.get_template_file_info(db, template_id)

@router.get("/{template_id}/download")
async def download_template_file(
    template_id: int,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """Download file m·∫´u phi·∫øu tr·∫£ l·ªùi"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        template.maToChuc is not None and  # System templates (maToChuc=None) accessible to all
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    file_info = await AnswerSheetTemplateService.get_template_file_info(db, template_id)
    
    if not file_info.downloadUrl:
        raise HTTPException(status_code=404, detail="Template ch∆∞a c√≥ file")
    
    # Redirect to download URL
    return RedirectResponse(url=file_info.downloadUrl)

# ========== ADVANCED OPERATIONS ==========

@router.post("/{template_id}/duplicate", response_model=AnswerSheetTemplateOut)
async def duplicate_template(
    template_id: int,
    duplicate_request: TemplateDuplicateRequest,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """Nh√¢n b·∫£n template"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p template g·ªëc
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    return await AnswerSheetTemplateService.duplicate_template(
        db, template_id, duplicate_request.new_name, 
        current_user.maNguoiDung, current_user.maToChuc
    )

@router.patch("/{template_id}/visibility", response_model=AnswerSheetTemplateOut)
async def toggle_template_visibility(
    template_id: int,
    visibility_request: TemplateVisibilityRequest,
    current_user: User = Depends(check_admin_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """Thay ƒë·ªïi tr·∫°ng th√°i c√¥ng khai c·ªßa template"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn thay ƒë·ªïi
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maNguoiTao != current_user.maNguoiDung):
        raise HTTPException(status_code=403, detail="Ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c Admin m·ªõi c√≥ th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i")
    
    return await AnswerSheetTemplateService.toggle_template_visibility(
        db, template_id, visibility_request.la_cong_khai
    )

@router.patch("/{template_id}/default", response_model=AnswerSheetTemplateOut)
async def set_default_template(
    template_id: int,
    default_request: TemplateDefaultRequest,
    current_user: User = Depends(check_admin_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """ƒê·∫∑t template l√†m m·∫∑c ƒë·ªãnh"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ch·ªâ Admin ho·∫∑c Manager m·ªõi c√≥ th·ªÉ ƒë·∫∑t template m·∫∑c ƒë·ªãnh
    if str(current_user.vaiTro).upper() not in ["ADMIN", "MANAGER"]:
        raise HTTPException(status_code=403, detail="Ch·ªâ Admin ho·∫∑c Manager m·ªõi c√≥ th·ªÉ ƒë·∫∑t template m·∫∑c ƒë·ªãnh")
    
    # Manager ch·ªâ c√≥ th·ªÉ ƒë·∫∑t template c·ªßa t·ªï ch·ª©c m√¨nh
    if str(current_user.vaiTro).upper() == "MANAGER" and template.maToChuc != current_user.maToChuc:
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi template c·ªßa t·ªï ch·ª©c kh√°c")
    
    return await AnswerSheetTemplateService.set_default_template(
        db, template_id, default_request.la_mac_dinh
    )

@router.get("/{template_id}/statistics", response_model=TemplateStatistics)
async def get_template_statistics(
    template_id: int,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """L·∫•y th·ªëng k√™ s·ª≠ d·ª•ng template"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    return await AnswerSheetTemplateService.get_template_statistics(db, template_id)

@router.post("/{template_id}/validate", response_model=TemplateValidationResponse)
async def validate_specific_template(
    template_id: int,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Convert template object to dict for validation
    template_data = {
        "tenMauPhieu": template.tenMauPhieu,
        "soCauHoi": template.soCauHoi,
        "soLuaChonMoiCau": template.soLuaChonMoiCau,
        "khoGiay": template.khoGiay,
        "coTuLuan": template.coTuLuan,
        "coThongTinHocSinh": template.coThongTinHocSinh,
        "coLogo": template.coLogo,
        "laCongKhai": template.laCongKhai,
        "laMacDinh": template.laMacDinh
    }
    
    return await AnswerSheetTemplateService.validate_template_structure(template_data)

# ========== BULK OPERATIONS ==========

@router.post("/bulk-delete", response_model=TemplateBulkResponse)
async def bulk_delete_templates(
    bulk_request: TemplateBulkDeleteRequest,
    current_user: User = Depends(check_admin_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """X√≥a nhi·ªÅu template c√πng l√∫c"""
    processed_count = 0
    failed_count = 0
    errors = []
    
    for template_id in bulk_request.template_ids:
        try:
            template = await AnswerSheetTemplateService.get_template(db, template_id)
            
            # Ki·ªÉm tra quy·ªÅn x√≥a
            if (str(current_user.vaiTro).upper() != "ADMIN" and 
                template.maNguoiTao != current_user.maNguoiDung):
                errors.append(f"Template {template_id}: Kh√¥ng c√≥ quy·ªÅn x√≥a")
                failed_count += 1
                continue
            
            await AnswerSheetTemplateService.delete_template(db, template_id, current_user.maNguoiDung)
            processed_count += 1
            
        except Exception as e:
            errors.append(f"Template {template_id}: {str(e)}")
            failed_count += 1
    
    return TemplateBulkResponse(
        success=failed_count == 0,
        message=f"ƒê√£ x·ª≠ l√Ω {processed_count} template, {failed_count} l·ªói",
        processed_count=processed_count,
        failed_count=failed_count,
        errors=errors
    )

# ========== OMR INTEGRATION ==========

@router.post("/{template_id}/omr-config", response_model=dict)
async def configure_omr_template(
    template_id: int,
    omr_config: dict,
    current_user: User = Depends(check_admin_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """C·∫•u h√¨nh OMR cho template"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn s·ª≠a
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maNguoiTao != current_user.maNguoiDung):
        raise HTTPException(status_code=403, detail="Ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c Admin m·ªõi c√≥ th·ªÉ c·∫•u h√¨nh OMR")
    
    # Validate OMR config
    validation = await get_omr_service().validate_template(omr_config)
    if not validation["valid"]:
        raise HTTPException(
            status_code=400,
            detail=f"OMR config kh√¥ng h·ª£p l·ªá: {', '.join(validation['errors'])}"
        )
    
    # Convert v√† l∆∞u OMR template
    omr_template = await get_omr_service().convert_eduscan_template_to_omr(omr_config)
    template_path = await get_omr_service().save_omr_template(template_id, omr_template)
    
    # C·∫≠p nh·∫≠t cauTrucJson v·ªõi OMR config
    current_structure = template.cauTrucJson or {}
    current_structure["omrConfig"] = omr_config
    current_structure["omrTemplatePath"] = template_path
    
    update_data = AnswerSheetTemplateUpdate(cauTrucJson=current_structure)
    await AnswerSheetTemplateService.update_template(db, template_id, update_data)
    
    return {
        "message": "OMR configuration saved successfully",
        "template_path": template_path,
        "validation": validation
    }

@router.get("/{template_id}/omr-preview", response_model=dict)
async def preview_omr_template_info(
    template_id: int,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """Preview OMR template info (kh√¥ng c·∫ßn upload file)"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    # Ki·ªÉm tra c√≥ OMR config kh√¥ng
    has_cau_truc_json = template.cauTrucJson is not None
    has_omr_config = has_cau_truc_json and "omrConfig" in template.cauTrucJson
    
    if not has_omr_config:
        return {
            "template_id": template_id,
            "template_name": template.tenMauPhieu,
            "has_cau_truc_json": has_cau_truc_json,
            "has_omr_config": False,
            "message": "Template ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh OMR"
        }
    
    # G·ªçi OMRService ƒë·ªÉ preview template
    try:
        result = await get_omr_service().preview_template(template_id)
        result.update({
            "template_id": template_id,
            "template_name": template.tenMauPhieu,
            "has_omr_config": True
        })
        return result
    except Exception as e:
        logger.error(f"Error previewing template {template_id}: {str(e)}")
        return {
            "template_id": template_id,
            "template_name": template.tenMauPhieu,
            "has_omr_config": True,
            "error": str(e),
            "message": f"L·ªói khi preview template: {str(e)}"
        }

@router.post("/{template_id}/omr-preview", response_model=dict)
async def preview_omr_template_with_image(
    template_id: int,
    sample_image: UploadFile = File(..., description="·∫¢nh m·∫´u ƒë·ªÉ preview OMR template"),
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """Preview OMR template v·ªõi sample image (POST ƒë·ªÉ upload file)"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    # Ki·ªÉm tra c√≥ OMR config kh√¥ng
    has_cau_truc_json = template.cauTrucJson is not None
    has_omr_config = has_cau_truc_json and "omrConfig" in template.cauTrucJson
    
    if not has_omr_config:
        return {
            "template_id": template_id,
            "template_name": template.tenMauPhieu,
            "has_omr_config": False,
            "sample_image_received": sample_image.filename if sample_image else None,
            "message": "Template ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh OMR"
        }
    
    # G·ªçi OMRService ƒë·ªÉ preview template v·ªõi sample image
    try:
        result = await get_omr_service().preview_template(template_id, sample_image)
        result.update({
            "template_id": template_id,
            "template_name": template.tenMauPhieu,
            "has_omr_config": True,
            "sample_image_received": sample_image.filename if sample_image else None,
            "sample_image_size": sample_image.size if sample_image else None
        })
        return result
    except Exception as e:
        logger.error(f"Error previewing template {template_id} with image: {str(e)}")
        return {
            "template_id": template_id,
            "template_name": template.tenMauPhieu,
            "has_omr_config": True,
            "sample_image_received": sample_image.filename if sample_image else None,
            "error": str(e),
            "message": f"L·ªói khi preview template v·ªõi ·∫£nh: {str(e)}"
        }

@router.post("/{template_id}/process-omr", response_model=dict)
async def process_omr_images(
    template_id: int,
    exam_id: int = Form(...),
    images: List[UploadFile] = File(...),
    yolo_model: str = Form("models/best.pt"),
    confidence: float = Form(0.25),
    auto_align: bool = Form(True),
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """X·ª≠ l√Ω batch OMR images - Requires Authentication"""
    return await process_omr_images_real(
        template_id=template_id,
        exam_id=exam_id,
        images=images,
        yolo_model=yolo_model,
        confidence=confidence,
        auto_align=auto_align,
        current_user=current_user,
        db=db
    )

# TEST ENDPOINT - NO AUTHENTICATION REQUIRED
@router.post("/{template_id}/process-omr-test", response_model=dict, include_in_schema=False)
async def process_omr_images_test(
    template_id: int,
    exam_id: int = Form(...),
    images: List[UploadFile] = File(...),
    yolo_model: str = Form("models/best.pt"),
    confidence: float = Form(0.25),
    auto_align: bool = Form(True),
    db: AsyncSession = Depends(get_async_db)
):
    """X·ª≠ l√Ω batch OMR images - TEST VERSION (No Auth)"""
    try:
        # Mock response for testing
        return {
            "success": True,
            "message": "Mock OMR processing completed successfully",
            "template_id": template_id,
            "exam_id": exam_id,
            "processed_images": len(images),
            "results": [
                {
                    "id": str(uuid.uuid4()),
                    "studentId": f"HS{i+1:03d}",
                    "score": 85 + (i * 2),
                    "percentage": 85.0 + (i * 2.0),
                    "answers": ["A", "B", "C", "D"] * 5,
                    "correctAnswers": 17 + i,
                    "wrongAnswers": 2,
                    "blankAnswers": 1 - i if i == 0 else 0,
                    "scanTime": datetime.now(timezone.utc).isoformat(),
                    "confidence": 0.95,
                }
                for i in range(min(len(images), 5))
            ],
            "processing_time": "2.34s",
            "yolo_model": yolo_model,
            "confidence_threshold": confidence,
            "auto_align": auto_align,
            "status": "completed",
            "note": "This is a test endpoint for development purposes"
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "Test endpoint error",
            "template_id": template_id,
            "exam_id": exam_id
        }

async def process_omr_images_real(
    template_id: int,
    exam_id: int,
    images: List[UploadFile],
    yolo_model: str,
    confidence: float,
    auto_align: bool,
    current_user: User,
    db: AsyncSession
):
    """Original OMR processing logic"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    # Ki·ªÉm tra c√≥ OMR config kh√¥ng
    if not template.cauTrucJson or "omrConfig" not in template.cauTrucJson:
        raise HTTPException(status_code=400, detail="Template ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh OMR")
    
    # X·ª≠ l√Ω OMR
    result = await get_omr_service().process_omr_images(
        db=db,
        exam_id=exam_id,
        template_id=template_id,
        images=images,
        yolo_model=yolo_model,
        confidence=confidence,
        auto_align=auto_align
    )
    
    return result

@router.get("/omr/models", response_model=List[dict])
async def get_omr_models(
    current_user: User = Depends(check_teacher_permission)
):
    """L·∫•y danh s√°ch YOLO models c√≥ s·∫µn"""
    return await get_omr_service().get_available_models()

@router.get("/{template_id}/download-pdf")
async def download_template_pdf(
    template_id: int,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """Download file PDF template ƒë·ªÉ in"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    # T√¨m file PDF trong cauTrucJson
    if not template.cauTrucJson or "fileTypes" not in template.cauTrucJson:
        raise HTTPException(status_code=404, detail="Template ch∆∞a c√≥ file PDF")
    
    pdf_info = template.cauTrucJson["fileTypes"].get("templatePdf")
    if not pdf_info:
        raise HTTPException(status_code=404, detail="Template kh√¥ng c√≥ file PDF")
    
    # L·∫•y file record t·ª´ database
    file_info = pdf_info.get("fileInfo", {})
    if not file_info.get("maTapTin"):
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y th√¥ng tin file PDF")
    
    file_record = await db.get(FileModel, file_info["maTapTin"])
    if not file_record or not os.path.exists(file_record.duongDan):
        raise HTTPException(status_code=404, detail="File PDF kh√¥ng t·ªìn t·∫°i")
    
    return FileResponse(
        file_record.duongDan,
        media_type="application/pdf",
        filename=f"{template.tenMauPhieu}_template.pdf"
    )

@router.get("/{template_id}/file-details", response_model=dict)
async def get_template_file_details(
    template_id: int,
    current_user: User = Depends(check_teacher_permission),
    db: AsyncSession = Depends(get_async_db)
):
    """L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ t·∫•t c·∫£ c√°c file ƒë√£ upload cho template"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (str(current_user.vaiTro).upper() != "ADMIN" and 
        template.maToChuc != current_user.maToChuc and 
        not template.laCongKhai):
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p template n√†y")
    
    if not template.cauTrucJson:
        return {
            "template_id": template_id,
            "template_name": template.tenMauPhieu,
            "files": {},
            "upload_status": {
                "completeness": 0,
                "uploaded_count": 0,
                "total_files": 3,
                "is_complete": False
            }
        }
    
    file_types = template.cauTrucJson.get("fileTypes", {})
    upload_status = template.cauTrucJson.get("uploadStatus", {})
    
    # Detailed file information
    file_details = {}
    
    for file_type, info in file_types.items():
        file_details[file_type] = {
            "purpose": info.get("purpose", ""),
            "uploaded": info.get("uploaded", False),
            "upload_date": info.get("uploadDate"),
            "storage_info": {
                "backend_path": info.get("storagePath", ""),
                "omr_path": info.get("omrCopyPath", ""),
                "download_url": info.get("downloadUrl", "")
            },
            "file_info": {
                "name": info.get("tenFileGoc", ""),
                "size": info.get("kichThuocFile", 0),
                "type": info.get("loaiFile", ""),
                "database_id": info.get("maTapTin")
            }
        }
        
        # Add specific config data for OMR
        if file_type == "omrConfig" and "configData" in info:
            file_details[file_type]["config_summary"] = info["configData"]
    
    return {
        "template_id": template_id,
        "template_name": template.tenMauPhieu,
        "files": file_details,
        "upload_status": {
            "completeness": upload_status.get("completeness", 0),
            "uploaded_count": upload_status.get("uploadedTypes", 0),
            "total_files": upload_status.get("totalTypes", 3),
            "is_complete": upload_status.get("isComplete", False),
            "missing_types": upload_status.get("missingTypes", []),
            "last_update": upload_status.get("lastUpdate")
        },
        "storage_locations": {
            "backend_uploads": "/backend/app/uploads/template/",
            "omr_templates": f"/backend/${settings.OMR_DATA_DIR}/templates/template_{template_id}/",
            "database_table": "TAPTIN"
        }
    }

# ========== PUBLIC ENDPOINTS (NO AUTHENTICATION) ==========

@router.get("/public/{template_id}/preview-pdf", include_in_schema=False)
async def public_preview_template_pdf(
    template_id: int,
    db: AsyncSession = Depends(get_async_db)
):
    """Preview file PDF template c√¥ng khai - kh√¥ng c·∫ßn authentication"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    if not template.laCongKhai and not template.laMacDinh:
        raise HTTPException(status_code=403, detail="Template n√†y kh√¥ng c√¥ng khai")
    
    if not template.cauTrucJson or "fileTypes" not in template.cauTrucJson:
        raise HTTPException(status_code=404, detail="Template ch∆∞a c√≥ file PDF")
    
    pdf_info = template.cauTrucJson["fileTypes"].get("templatePdf")
    if not pdf_info or not pdf_info.get("uploaded"):
        raise HTTPException(status_code=404, detail="Template kh√¥ng c√≥ file PDF ho·∫∑c ch∆∞a ƒë∆∞·ª£c upload")
    
    ma_tap_tin = pdf_info.get("maTapTin")
    if not ma_tap_tin:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y th√¥ng tin m√£ t·ªáp tin c·ªßa file PDF")

    file_record = await db.get(FileModel, ma_tap_tin)
    if not file_record or not os.path.exists(file_record.duongDan):
        raise HTTPException(status_code=404, detail="File PDF kh√¥ng t·ªìn t·∫°i tr√™n server")
    
    return FileResponse(
        file_record.duongDan,
        media_type="application/pdf",
        filename=f"{template.tenMauPhieu}_preview.pdf",
        headers={"Content-Disposition": "inline"}
    )

@router.get("/public/{template_id}/download-pdf", include_in_schema=False)
async def public_download_template_pdf(
    template_id: int,
    db: AsyncSession = Depends(get_async_db)
):
    """Download file PDF template c√¥ng khai - kh√¥ng c·∫ßn authentication"""
    template = await AnswerSheetTemplateService.get_template(db, template_id)
    
    if not template.laCongKhai and not template.laMacDinh:
        raise HTTPException(status_code=403, detail="Template n√†y kh√¥ng c√¥ng khai")
    
    if not template.cauTrucJson or "fileTypes" not in template.cauTrucJson:
        raise HTTPException(status_code=404, detail="Template ch∆∞a c√≥ file PDF")
    
    pdf_info = template.cauTrucJson["fileTypes"].get("templatePdf")
    if not pdf_info or not pdf_info.get("uploaded"):
        raise HTTPException(status_code=404, detail="Template kh√¥ng c√≥ file PDF ho·∫∑c ch∆∞a ƒë∆∞·ª£c upload")
        
    ma_tap_tin = pdf_info.get("maTapTin")
    if not ma_tap_tin:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y th√¥ng tin m√£ t·ªáp tin c·ªßa file PDF")

    file_record = await db.get(FileModel, ma_tap_tin)
    if not file_record or not os.path.exists(file_record.duongDan):
        raise HTTPException(status_code=404, detail="File PDF kh√¥ng t·ªìn t·∫°i tr√™n server")
    
    return FileResponse(
        file_record.duongDan,
        media_type="application/pdf",
        filename=f"{template.tenMauPhieu}_template.pdf"
    )
