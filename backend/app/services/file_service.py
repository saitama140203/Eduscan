import os
import shutil
import time
from typing import Optional, List
from fastapi import UploadFile, HTTPException
from sqlalchemy.orm import Session

from app.models.file import File
from app.models.user import User
from app.models.organization import Organization
from app.core.config import settings
from app.core.config import settings

class FileService:
    """Service ƒë·ªÉ qu·∫£n l√Ω file trong b·∫£ng TAPTIN"""
    
    def __init__(self, db: Session):
        self.db = db
        self.upload_dir = settings.UPLOAD_DIR
        self.ensure_upload_dir()
    
    def ensure_upload_dir(self):
        """T·∫°o th∆∞ m·ª•c upload n·∫øu ch∆∞a c√≥"""
        if not os.path.exists(self.upload_dir):
            os.makedirs(self.upload_dir, exist_ok=True)
            print(f"‚úÖ T·∫°o th∆∞ m·ª•c upload: {os.path.abspath(self.upload_dir)}")
    
    def save_file(
        self,
        file: UploadFile,
        ma_nguoi_dung: int,
        ma_to_chuc: int,
        thuc_the_nguon: str = "TEMPLATE",
        ma_thuc_the_nguon: Optional[int] = None,
        auto_commit: bool = True
    ) -> File:
        """
        L∆∞u file v√†o h·ªá th·ªëng v√† database
        
        Args:
            file: File upload t·ª´ FastAPI
            ma_nguoi_dung: ID ng∆∞·ªùi d√πng upload
            ma_to_chuc: ID t·ªï ch·ª©c
            thuc_the_nguon: Lo·∫°i th·ª±c th·ªÉ ngu·ªìn (TEMPLATE, EXAM, etc.)
            ma_thuc_the_nguon: ID c·ªßa th·ª±c th·ªÉ ngu·ªìn
            auto_commit: T·ª± ƒë·ªông commit hay kh√¥ng
        """
        file_path = None
        try:
            # T·∫°o th∆∞ m·ª•c con theo th·ª±c th·ªÉ ngu·ªìn
            sub_dir = os.path.join(self.upload_dir, thuc_the_nguon.lower())
            if not os.path.exists(sub_dir):
                os.makedirs(sub_dir, exist_ok=True)
                print(f"‚úÖ T·∫°o th∆∞ m·ª•c con: {os.path.abspath(sub_dir)}")
            
            # T·∫°o t√™n file unique
            file_extension = os.path.splitext(file.filename or "unknown")[1]
            timestamp = int(time.time())
            safe_filename = f"{timestamp}_{file.filename or 'unknown'}"
            file_path = os.path.join(sub_dir, safe_filename)
            
            print(f"üìÅ L∆∞u file v√†o: {os.path.abspath(file_path)}")
            
            # Reset file pointer to beginning
            file.file.seek(0)
            
            # L∆∞u file v√†o disk
            with open(file_path, "wb") as buffer:
                shutil.copyfileobj(file.file, buffer)
            
            # Verify file was written
            if not os.path.exists(file_path):
                raise Exception("File kh√¥ng ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng")
                
            # L·∫•y th√¥ng tin file
            file_size = os.path.getsize(file_path)
            file_type = file.content_type or "application/octet-stream"
            
            print(f"‚úÖ File ƒë√£ l∆∞u: {file_path} ({file_size} bytes)")
            
            # T·∫°o record trong database
            db_file = File(
                maNguoiDung=ma_nguoi_dung,
                maToChuc=ma_to_chuc,
                tenTapTin=file.filename,
                duongDan=file_path,
                loaiTapTin=file_type,
                kichThuoc=file_size,
                thucTheNguon=thuc_the_nguon,
                maThucTheNguon=ma_thuc_the_nguon
            )
            
            self.db.add(db_file)
            
            if auto_commit:
                self.db.commit()
                self.db.refresh(db_file)
                print(f"‚úÖ Database record t·∫°o th√†nh c√¥ng: ID {db_file.maTapTin}")
            else:
                # Flush ƒë·ªÉ c√≥ ID nh∆∞ng ch∆∞a commit
                self.db.flush()
                self.db.refresh(db_file)
                print(f"‚úÖ Database record ƒë√£ flush: ID {db_file.maTapTin} (ch∆∞a commit)")
            
            return db_file
            
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u file: {str(e)}")
            # Rollback database n·∫øu c√≥ l·ªói
            self.db.rollback()
            
            # X√≥a file n·∫øu c√≥ l·ªói database
            if file_path and os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    print(f"üóëÔ∏è ƒê√£ x√≥a file l·ªói: {file_path}")
                except:
                    pass
            
            raise HTTPException(status_code=500, detail=f"L·ªói l∆∞u file: {str(e)}")
    
    def get_file_by_id(self, ma_tap_tin: int) -> Optional[File]:
        """L·∫•y th√¥ng tin file theo ID"""
        return self.db.query(File).filter(File.maTapTin == ma_tap_tin).first()
    
    def get_files_by_entity(
        self, 
        thuc_the_nguon: str, 
        ma_thuc_the_nguon: int
    ) -> List[File]:
        """L·∫•y danh s√°ch file theo th·ª±c th·ªÉ ngu·ªìn"""
        return self.db.query(File).filter(
            File.thucTheNguon == thuc_the_nguon,
            File.maThucTheNguon == ma_thuc_the_nguon
        ).all()
    
    def delete_file(self, ma_tap_tin: int, ma_nguoi_dung: int) -> bool:
        """
        X√≥a file (ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c admin m·ªõi ƒë∆∞·ª£c x√≥a)
        """
        file_record = self.get_file_by_id(ma_tap_tin)
        if not file_record:
            return False
        
        # Ki·ªÉm tra quy·ªÅn x√≥a
        user = self.db.query(User).filter(User.maNguoiDung == ma_nguoi_dung).first()
        if not user:
            return False
        
        # Ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c admin m·ªõi ƒë∆∞·ª£c x√≥a
        if file_record.maNguoiDung != ma_nguoi_dung and user.vaiTro != "Admin":
            return False
        
        try:
            # X√≥a file v·∫≠t l√Ω
            if os.path.exists(file_record.duongDan):
                os.remove(file_record.duongDan)
            
            # X√≥a record database
            self.db.delete(file_record)
            self.db.commit()
            
            return True
            
        except Exception:
            return False
    
    def get_file_path(self, ma_tap_tin: int) -> Optional[str]:
        """L·∫•y ƒë∆∞·ªùng d·∫´n file ƒë·ªÉ download"""
        file_record = self.get_file_by_id(ma_tap_tin)
        if file_record and os.path.exists(file_record.duongDan):
            return file_record.duongDan
        return None
    
    def get_files_by_user(self, ma_nguoi_dung: int) -> List[File]:
        """L·∫•y danh s√°ch file c·ªßa user"""
        return self.db.query(File).filter(File.maNguoiDung == ma_nguoi_dung).all()
    
    def get_files_by_organization(self, ma_to_chuc: int) -> List[File]:
        """L·∫•y danh s√°ch file c·ªßa t·ªï ch·ª©c"""
        return self.db.query(File).filter(File.maToChuc == ma_to_chuc).all()

# Import time module
import time 